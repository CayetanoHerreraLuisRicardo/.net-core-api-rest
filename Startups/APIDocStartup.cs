using System;
using Microsoft.OpenApi.Models;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Builder;
using System.IO;
using System.Reflection;
using TestSlabon.Utils;

namespace TestSlabon.Startups
{
    internal class ApiDocStartup
    {
        internal static void ConfigureServices(IServiceCollection services)
        {
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Version = "v1",
                    Title = "API Slabón Test",
                    Description = "Documentación de la API usando la especificación OpenAPI",
                    Contact = new OpenApiContact
                    {
                        Name = "Ricardo Cayetano",
                        Email = "richych92@gmail.com",
                        Url = new Uri("https://about.me/richy_92"),
                    },
                    License = new OpenApiLicense
                    {
                        Name = "UNLICENCE"
                    }
                });
                c.OperationFilter<AuthOperationFilter>();
                c.AddSecurityDefinition("bearer", new OpenApiSecurityScheme
                {
                    Description = "`¡Introduce salamente a cadena del token!` - no incluyas el prefijo `Bearer` swagger lo hace por ti ;)",
                    Type = SecuritySchemeType.Http,
                    BearerFormat = "JWT",
                    In = ParameterLocation.Header,
                    Scheme = "bearer"
                });
                //////Add Operation Specific Authorization///////
                //c.OperationFilter<AuthOperationFilter>();
                ////////////////////////////////////////////////
                //c.AddSecurityRequirement(new OpenApiSecurityRequirement()
                //{
                //    {
                //        new OpenApiSecurityScheme
                //        {
                //            Reference = new OpenApiReference
                //            {
                //                Type = ReferenceType.SecurityScheme,
                //                Id = "Bearer"
                //            },
                //            Scheme = "oauth2",
                //            Name = "Bearer",
                //            In = ParameterLocation.Header,

                //        },
                //        new List<string>()
                //    }
                //});
                //Locate the XML file being generated by ASP.NET...
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                //... and tell Swagger to use those XML comments.
                c.IncludeXmlComments(xmlPath);
            });
        }

        internal static void Configure(IApplicationBuilder app)
        {
            app.UseSwagger();
            app.UseSwaggerUI(c =>
            {
                //c.RoutePrefix = "swagger";
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "API Slabón");
            });
        }
    }
}
